// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartGarage.Data;

namespace SmartGarage.Data.Migrations
{
    [DbContext(typeof(SmartGarageContext))]
    [Migration("20210609151620_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 11,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SmartGarage.Data.Models.Garage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Garages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "bul.Graf Ignatiev 0",
                            Name = "Insomnia"
                        });
                });

            modelBuilder.Entity("SmartGarage.Data.Models.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Tesla"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Toyota"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Volkswagen"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Daimler"
                        },
                        new
                        {
                            Id = 5,
                            Name = "BMW"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Honda"
                        });
                });

            modelBuilder.Entity("SmartGarage.Data.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GarageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GarageId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArrivalDate = new DateTime(2021, 6, 7, 18, 16, 20, 516, DateTimeKind.Local).AddTicks(7531),
                            FinishDate = new DateTime(2021, 6, 9, 18, 16, 20, 518, DateTimeKind.Local).AddTicks(9451),
                            GarageId = 1,
                            IsDeleted = false,
                            OrderStatusId = 3,
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 2,
                            ArrivalDate = new DateTime(2021, 6, 6, 18, 16, 20, 518, DateTimeKind.Local).AddTicks(9849),
                            GarageId = 1,
                            IsDeleted = false,
                            OrderStatusId = 1,
                            VehicleId = 3
                        },
                        new
                        {
                            Id = 3,
                            ArrivalDate = new DateTime(2021, 5, 30, 18, 16, 20, 518, DateTimeKind.Local).AddTicks(9874),
                            GarageId = 1,
                            IsDeleted = false,
                            OrderStatusId = 2,
                            VehicleId = 4
                        },
                        new
                        {
                            Id = 4,
                            ArrivalDate = new DateTime(2021, 6, 5, 18, 16, 20, 518, DateTimeKind.Local).AddTicks(9879),
                            GarageId = 1,
                            IsDeleted = false,
                            OrderStatusId = 2,
                            VehicleId = 2
                        },
                        new
                        {
                            Id = 5,
                            ArrivalDate = new DateTime(2021, 6, 8, 18, 16, 20, 518, DateTimeKind.Local).AddTicks(9882),
                            GarageId = 1,
                            IsDeleted = false,
                            OrderStatusId = 1,
                            VehicleId = 1
                        });
                });

            modelBuilder.Entity("SmartGarage.Data.Models.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Not started"
                        },
                        new
                        {
                            Id = 2,
                            Name = "In progress"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ready for pickup"
                        });
                });

            modelBuilder.Entity("SmartGarage.Data.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "706160c6-5f17-4452-9840-7c3dbd238f4b",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "2607d08b-6b1b-4fdc-a329-1e7ac65da23e",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "89395fda-e6c5-451a-b319-9dc3f619b4c1",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("SmartGarage.Data.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(19,2)");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Oil change",
                            Price = 74.99m
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Change all tires",
                            Price = 24.99m
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Change a tire",
                            Price = 8.99m
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Pads replacement",
                            Price = 249.99m
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "Battery replacement",
                            Price = 199.99m
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = "Computer diagnostic",
                            Price = 35.99m
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Name = "Fuel pump replacment",
                            Price = 180.20m
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            Name = "Diagnostic and endgine inspection",
                            Price = 125.30m
                        });
                });

            modelBuilder.Entity("SmartGarage.Data.Models.ServiceOrder", b =>
                {
                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("ServiceId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("ServiceOrders");

                    b.HasData(
                        new
                        {
                            ServiceId = 1,
                            OrderId = 1
                        },
                        new
                        {
                            ServiceId = 2,
                            OrderId = 2
                        },
                        new
                        {
                            ServiceId = 1,
                            OrderId = 3
                        },
                        new
                        {
                            ServiceId = 5,
                            OrderId = 4
                        },
                        new
                        {
                            ServiceId = 3,
                            OrderId = 5
                        },
                        new
                        {
                            ServiceId = 3,
                            OrderId = 1
                        });
                });

            modelBuilder.Entity("SmartGarage.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrivingLicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "Sofia, Bulgaria",
                            Age = 37,
                            ConcurrencyStamp = "7da60fbc-66b6-4b52-b7af-16b022076e14",
                            CurrentRole = "ADMIN",
                            DrivingLicenseNumber = "93302193",
                            Email = "smartgarage@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Smart",
                            IsDeleted = false,
                            LastName = "Garage",
                            LockoutEnabled = false,
                            NormalizedEmail = "SMARTGARAGE@GMAIL.COM",
                            NormalizedUserName = "SMARTGARAGE",
                            PasswordHash = "AQAAAAEAACcQAAAAEFCWQlwKH7gRQdlf9upJ2mAOJHKek5S7SCa9KpTWesu4I+VsD49ojJathdojtIoT1w==",
                            PhoneNumber = "0851547896",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7c258773-18f9-4240-a5aa-9d1a2d68ca10",
                            TwoFactorEnabled = false,
                            UserName = "SmartGarage"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "Sofia, Bulgaria",
                            Age = 28,
                            ConcurrencyStamp = "8661e004-f254-43d7-80b7-ab806c1ae25f",
                            CurrentRole = "EMPLOYEE",
                            DrivingLicenseNumber = "3241219",
                            Email = "petar@test.com",
                            EmailConfirmed = false,
                            FirstName = "Petar",
                            IsDeleted = false,
                            LastName = "Petrov",
                            LockoutEnabled = false,
                            NormalizedEmail = "PETAR@TEST.COM",
                            NormalizedUserName = "PETARPETROV",
                            PasswordHash = "AQAAAAEAACcQAAAAEKiW4KLOl8J0uhOUFgGC98Re35XnjlPZ42jRecVN+jz9aZFZmUZUPADemiBfWRtYYA==",
                            PhoneNumber = "0851521896",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "deb6b9eb-6a98-4475-b9e9-6e425c1acb07",
                            TwoFactorEnabled = false,
                            UserName = "PetarPetrov"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "Sofia, Bulgaria",
                            Age = 28,
                            ConcurrencyStamp = "261bede5-6454-4ed1-a892-5e3a143774a2",
                            CurrentRole = "CUSTOMER",
                            DrivingLicenseNumber = "13302343",
                            Email = "firstcustomer@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "First",
                            IsDeleted = false,
                            LastName = "Customer",
                            LockoutEnabled = false,
                            NormalizedEmail = "FIRSTCUSTOMER@GMAIL.COM",
                            NormalizedUserName = "THEVERYFIRSTCUSTOMER",
                            PasswordHash = "AQAAAAEAACcQAAAAEEFvNkW3O54BIh4b6U8pgSE2yjn31XP4TQxEOaMGxvhO18sd68ZHovaCoEV9OFiVog==",
                            PhoneNumber = "0851545496",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "20fc73e7-6d87-4104-a289-480a80d2c71e",
                            TwoFactorEnabled = false,
                            UserName = "TheVeryFirstCustomer"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "Burgas, Bulgaria",
                            Age = 40,
                            ConcurrencyStamp = "a51d1efb-72af-4798-a382-48c7a7077486",
                            CurrentRole = "CUSTOMER",
                            DrivingLicenseNumber = "73322193",
                            Email = "ivangeorgiev14@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            IsDeleted = false,
                            LastName = "Georgiev",
                            LockoutEnabled = false,
                            NormalizedEmail = "IVANGEORGIEV14@GMAIL.COM",
                            NormalizedUserName = "IVANG",
                            PasswordHash = "AQAAAAEAACcQAAAAEKCfDdcXMjEWNTIc3D+kchplYFWQtbn1PQ5MS9zej3UtpuvzY31C85LWqpWE2pCYtg==",
                            PhoneNumber = "0878647896",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ad3f9447-29b5-4458-82b3-64be461128bd",
                            TwoFactorEnabled = false,
                            UserName = "IvanG"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "Blagoevgrad, Bulgaria",
                            Age = 22,
                            ConcurrencyStamp = "5a8ad026-5f36-4374-93c9-250c3535a707",
                            CurrentRole = "CUSTOMER",
                            DrivingLicenseNumber = "91304433",
                            Email = "californication@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Todor",
                            IsDeleted = false,
                            LastName = "Kolev",
                            LockoutEnabled = false,
                            NormalizedEmail = "CALIFORNICATION@GMAIL.COM",
                            NormalizedUserName = "LOVETOACT",
                            PasswordHash = "AQAAAAEAACcQAAAAEF89yaexWuBwciKfJXrX8U5JHgWcbrfCTFDUqbSw3X+KHxrEQjfq1FNyRwCx4d9P+g==",
                            PhoneNumber = "0871247896",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "91917000-69e2-45bd-830e-6f5f73f40c95",
                            TwoFactorEnabled = false,
                            UserName = "LoveToAct"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Address = "Blagoevgrad, Bulgaria",
                            Age = 24,
                            ConcurrencyStamp = "06c84c79-6de7-4fb3-92b0-6fb08d634241",
                            CurrentRole = "CUSTOMER",
                            DrivingLicenseNumber = "91304433123",
                            Email = "penkapetrova@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Penka",
                            IsDeleted = false,
                            LastName = "Petrova",
                            LockoutEnabled = false,
                            NormalizedEmail = "PENKAPETROVA@GMAIL.COM",
                            NormalizedUserName = "PENKAPETROVA",
                            PasswordHash = "AQAAAAEAACcQAAAAEKFd8+uUa2qIvLh/cxoDoAdrqW2XmKGR7wXPDMsAyxUGhTRLI9ygYbQwlzZtgBjcmg==",
                            PhoneNumber = "0879737896",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "459cc8c8-08c1-4e1c-887e-f2dfb0feac40",
                            TwoFactorEnabled = false,
                            UserName = "PenkaPetrova"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Address = "Botevgrad, Bulgaria",
                            Age = 31,
                            ConcurrencyStamp = "a64066f3-d5e2-46f5-ae19-926baa5bfe8d",
                            CurrentRole = "CUSTOMER",
                            DrivingLicenseNumber = "4984654156",
                            Email = "ivandimitrov@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            IsDeleted = false,
                            LastName = "Dimitrov",
                            LockoutEnabled = false,
                            NormalizedEmail = "IVANDIMITROV@GMAIL.COM",
                            NormalizedUserName = "IVANDIMITROV",
                            PasswordHash = "AQAAAAEAACcQAAAAEFC2b+Vq2bhcD9F+9SVKl/YHKrIFmoLrgk9ticeiR7nu/UzGs8SiGaf9qhBCOieEjA==",
                            PhoneNumber = "08897247896",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0f7297b0-c2ca-43ee-a3fd-7c7457f03d38",
                            TwoFactorEnabled = false,
                            UserName = "IvanDimitrov"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            Address = "Russe, Bulgaria",
                            Age = 48,
                            ConcurrencyStamp = "7387d5fc-f375-4c37-a0ad-c59120f31a46",
                            CurrentRole = "CUSTOMER",
                            DrivingLicenseNumber = "498124654156",
                            Email = "kuzmov34@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Marian",
                            IsDeleted = false,
                            LastName = "Kuzmov",
                            LockoutEnabled = false,
                            NormalizedEmail = "KUZMOV34@GMAIL.COM",
                            NormalizedUserName = "MARIANKUZMOV",
                            PasswordHash = "AQAAAAEAACcQAAAAEMtzU6/t/lmmyI1ztHcAPB1jSZ42/oiL+Q1rlTq0ajIfLODoAsZEZlzTSBwpILf88g==",
                            PhoneNumber = "08897247943",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ad161f21-0c8d-4b19-a5ed-8c754a280682",
                            TwoFactorEnabled = false,
                            UserName = "MarianKusmov"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            Address = "Sofia, Bulgaria",
                            Age = 35,
                            ConcurrencyStamp = "53c25bc0-f281-452b-a48e-fe6d76466291",
                            CurrentRole = "CUSTOMER",
                            DrivingLicenseNumber = "49812324654156",
                            Email = "pepilakov34@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Petar",
                            IsDeleted = false,
                            LastName = "Lakov",
                            LockoutEnabled = false,
                            NormalizedEmail = "PEPILAKOV34@GMAIL.COM",
                            NormalizedUserName = "PETARLAKOV",
                            PasswordHash = "AQAAAAEAACcQAAAAEK6bLBkDhv2oaghpdBu97DvZF91yzEGbxaQCWgM0EGmK2I9MVnQ4LRHXdU1gnsN4Qg==",
                            PhoneNumber = "08897247444",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "743f20b9-745d-43ed-8afd-1fd67b5d2d53",
                            TwoFactorEnabled = false,
                            UserName = "PetarLakov"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            Address = "Dobrich, Bulgaria",
                            Age = 24,
                            ConcurrencyStamp = "594ddcc7-16db-4bec-9f1e-1aab803d2946",
                            CurrentRole = "CUSTOMER",
                            DrivingLicenseNumber = "4982124654156",
                            Email = "nikola12@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Nikola",
                            IsDeleted = false,
                            LastName = "Urumov",
                            LockoutEnabled = false,
                            NormalizedEmail = "NIKOLA12@GMAIL.COM",
                            NormalizedUserName = "NIKOLAURUMOV",
                            PasswordHash = "AQAAAAEAACcQAAAAEAP3R3HsQpX1pgbrLwCtWP9EMLpOoCYmcfslRzpnVcg9ZofaoPiIcd+VSU0+46vMmg==",
                            PhoneNumber = "08897247111",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "411410b8-4f6a-43e2-937e-da22b3a7d1f4",
                            TwoFactorEnabled = false,
                            UserName = "NikolaUrumov"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            Address = "Pernik, Bulgaria",
                            Age = 49,
                            ConcurrencyStamp = "6323ed1e-9986-4d30-9a53-08a324e380bd",
                            CurrentRole = "CUSTOMER",
                            DrivingLicenseNumber = "42134654156",
                            Email = "rumi@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Roman",
                            IsDeleted = false,
                            LastName = "Abramovich",
                            LockoutEnabled = false,
                            NormalizedEmail = "RUMI@GMAIL.COM",
                            NormalizedUserName = "RUMI123",
                            PasswordHash = "AQAAAAEAACcQAAAAEHBNEZbCPwEFT3WQodKurndNfBK8fH8x8wcjoCfqBPHLtY1UcE9zcT6OvnoEG8yzug==",
                            PhoneNumber = "0889724777",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0338a42e-b1cb-4a68-b4cf-952f6ab0202a",
                            TwoFactorEnabled = false,
                            UserName = "Rumi123"
                        });
                });

            modelBuilder.Entity("SmartGarage.Data.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NumberPlate")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasColumnType("nvarchar(17)")
                        .HasMaxLength(17);

                    b.Property<int>("VehicleModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleModelId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Colour = "Blue",
                            IsDeleted = false,
                            NumberPlate = "CA 1994 BC",
                            UserId = 3,
                            VIN = "1HGCM82633A004352",
                            VehicleModelId = 2
                        },
                        new
                        {
                            Id = 2,
                            Colour = "Black",
                            IsDeleted = false,
                            NumberPlate = "CA 2011 OC",
                            UserId = 3,
                            VIN = "1HGCM82633A004352",
                            VehicleModelId = 11
                        },
                        new
                        {
                            Id = 3,
                            Colour = "Red",
                            IsDeleted = false,
                            NumberPlate = "E 3994 AC",
                            UserId = 4,
                            VIN = "1HGCM82633A004352",
                            VehicleModelId = 8
                        },
                        new
                        {
                            Id = 4,
                            Colour = "White",
                            IsDeleted = false,
                            NumberPlate = "A 1839 BA",
                            UserId = 5,
                            VIN = "1HGCM82633A004352",
                            VehicleModelId = 4
                        });
                });

            modelBuilder.Entity("SmartGarage.Data.Models.VehicleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("VehicleModels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ManufacturerId = 1,
                            Name = "Model X",
                            VehicleTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            ManufacturerId = 1,
                            Name = "Model S",
                            VehicleTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            ManufacturerId = 2,
                            Name = "Prius",
                            VehicleTypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            ManufacturerId = 2,
                            Name = "HiAce H300",
                            VehicleTypeId = 3
                        },
                        new
                        {
                            Id = 5,
                            ManufacturerId = 3,
                            Name = "Passat",
                            VehicleTypeId = 1
                        },
                        new
                        {
                            Id = 6,
                            ManufacturerId = 3,
                            Name = "Arteon",
                            VehicleTypeId = 1
                        },
                        new
                        {
                            Id = 7,
                            ManufacturerId = 4,
                            Name = "C-class",
                            VehicleTypeId = 1
                        },
                        new
                        {
                            Id = 8,
                            ManufacturerId = 4,
                            Name = "Western-Star",
                            VehicleTypeId = 4
                        },
                        new
                        {
                            Id = 9,
                            ManufacturerId = 5,
                            Name = "X6",
                            VehicleTypeId = 1
                        },
                        new
                        {
                            Id = 10,
                            ManufacturerId = 5,
                            Name = "E30",
                            VehicleTypeId = 1
                        },
                        new
                        {
                            Id = 11,
                            ManufacturerId = 6,
                            Name = "Hornet",
                            VehicleTypeId = 2
                        },
                        new
                        {
                            Id = 12,
                            ManufacturerId = 6,
                            Name = "Civic",
                            VehicleTypeId = 1
                        });
                });

            modelBuilder.Entity("SmartGarage.Data.Models.VehicleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VehicleTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Car"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Motorcycle"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Bus"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Truck"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("SmartGarage.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("SmartGarage.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("SmartGarage.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("SmartGarage.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartGarage.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("SmartGarage.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartGarage.Data.Models.Order", b =>
                {
                    b.HasOne("SmartGarage.Data.Models.Garage", "Garage")
                        .WithMany("Orders")
                        .HasForeignKey("GarageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartGarage.Data.Models.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartGarage.Data.Models.Vehicle", "Vehicle")
                        .WithMany("Orders")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartGarage.Data.Models.ServiceOrder", b =>
                {
                    b.HasOne("SmartGarage.Data.Models.Order", "Order")
                        .WithMany("ServiceOrder")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartGarage.Data.Models.Service", "Service")
                        .WithMany("ServiceOrder")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartGarage.Data.Models.Vehicle", b =>
                {
                    b.HasOne("SmartGarage.Data.Models.User", "User")
                        .WithMany("Vehicles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartGarage.Data.Models.VehicleModel", "VehicleModel")
                        .WithMany()
                        .HasForeignKey("VehicleModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartGarage.Data.Models.VehicleModel", b =>
                {
                    b.HasOne("SmartGarage.Data.Models.Manufacturer", "Manufacturer")
                        .WithMany("Models")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartGarage.Data.Models.VehicleType", "VehicleType")
                        .WithMany("VehicleModels")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
