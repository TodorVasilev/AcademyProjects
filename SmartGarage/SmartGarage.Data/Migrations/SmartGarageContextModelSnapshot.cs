// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartGarage.Data;

namespace SmartGarage.Data.Migrations
{
    [DbContext(typeof(SmartGarageContext))]
    partial class SmartGarageContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 11,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SmartGarage.Data.Models.Garage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Garages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "bul.Graf Ignatiev 0",
                            Name = "Insomnia"
                        });
                });

            modelBuilder.Entity("SmartGarage.Data.Models.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Tesla"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Toyota"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Volkswagen"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Daimler"
                        },
                        new
                        {
                            Id = 5,
                            Name = "BMW"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Honda"
                        });
                });

            modelBuilder.Entity("SmartGarage.Data.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GarageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GarageId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArrivalDate = new DateTime(2021, 6, 2, 15, 0, 42, 842, DateTimeKind.Local).AddTicks(6932),
                            FinishDate = new DateTime(2021, 6, 4, 15, 0, 42, 844, DateTimeKind.Local).AddTicks(6194),
                            GarageId = 1,
                            IsDeleted = false,
                            OrderStatusId = 3,
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 2,
                            ArrivalDate = new DateTime(2021, 6, 1, 15, 0, 42, 844, DateTimeKind.Local).AddTicks(6674),
                            GarageId = 1,
                            IsDeleted = false,
                            OrderStatusId = 1,
                            VehicleId = 3
                        },
                        new
                        {
                            Id = 3,
                            ArrivalDate = new DateTime(2021, 5, 25, 15, 0, 42, 844, DateTimeKind.Local).AddTicks(6692),
                            GarageId = 1,
                            IsDeleted = false,
                            OrderStatusId = 2,
                            VehicleId = 4
                        },
                        new
                        {
                            Id = 4,
                            ArrivalDate = new DateTime(2021, 5, 31, 15, 0, 42, 844, DateTimeKind.Local).AddTicks(6696),
                            GarageId = 1,
                            IsDeleted = false,
                            OrderStatusId = 2,
                            VehicleId = 2
                        },
                        new
                        {
                            Id = 5,
                            ArrivalDate = new DateTime(2021, 6, 3, 15, 0, 42, 844, DateTimeKind.Local).AddTicks(6700),
                            GarageId = 1,
                            IsDeleted = false,
                            OrderStatusId = 1,
                            VehicleId = 1
                        });
                });

            modelBuilder.Entity("SmartGarage.Data.Models.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Not started"
                        },
                        new
                        {
                            Id = 2,
                            Name = "In progress"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ready for pickup"
                        });
                });

            modelBuilder.Entity("SmartGarage.Data.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "719dd0cf-dc03-4a4e-a31c-c9e13efc5b0f",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "85a34a66-56b8-4100-bbc5-43789bdc37a5",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "aad65966-1e62-4115-a39a-ada51b546d38",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("SmartGarage.Data.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(19,2)");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Oil change",
                            Price = 74.99m
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Change all tires",
                            Price = 24.99m
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Change a tire",
                            Price = 8.99m
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Pads replacement",
                            Price = 249.99m
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "Battery replacement",
                            Price = 199.99m
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = "Computer diagnostic",
                            Price = 35.99m
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Name = "Fuel pump replacment",
                            Price = 180.20m
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            Name = "Diagnostic and endgine inspection",
                            Price = 125.30m
                        });
                });

            modelBuilder.Entity("SmartGarage.Data.Models.ServiceOrder", b =>
                {
                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("ServiceId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("ServiceOrders");

                    b.HasData(
                        new
                        {
                            ServiceId = 1,
                            OrderId = 1
                        },
                        new
                        {
                            ServiceId = 2,
                            OrderId = 2
                        },
                        new
                        {
                            ServiceId = 1,
                            OrderId = 3
                        },
                        new
                        {
                            ServiceId = 5,
                            OrderId = 4
                        },
                        new
                        {
                            ServiceId = 3,
                            OrderId = 5
                        },
                        new
                        {
                            ServiceId = 3,
                            OrderId = 1
                        });
                });

            modelBuilder.Entity("SmartGarage.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrivingLicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "Sofia, Bulgaria",
                            Age = 37,
                            ConcurrencyStamp = "fa6623e7-135f-44f9-b7eb-807b7bab637a",
                            CurrentRole = "ADMIN",
                            DrivingLicenseNumber = "93302193",
                            Email = "smartgarage@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Smart",
                            IsDeleted = false,
                            LastName = "Garage",
                            LockoutEnabled = false,
                            NormalizedEmail = "SMARTGARAGE@GMAIL.COM",
                            NormalizedUserName = "SMARTGARAGE",
                            PasswordHash = "AQAAAAEAACcQAAAAEL5R3cdKDbCqpzWDP+Gk1ofJKKchuc1fuiBiL0lWFR8vPF+nH4GmovW1yngKC3QS2A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4bfbd989-3b2b-4e68-a850-e6efe6700ce3",
                            TwoFactorEnabled = false,
                            UserName = "SmartGarage"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "Sofia, Bulgaria",
                            Age = 28,
                            ConcurrencyStamp = "29fdc3f1-f177-457c-a40b-8fb25c822694",
                            CurrentRole = "EMPLOYEE",
                            DrivingLicenseNumber = "3241219",
                            Email = "petar@test.com",
                            EmailConfirmed = false,
                            FirstName = "Petar",
                            IsDeleted = false,
                            LastName = "Petrov",
                            LockoutEnabled = false,
                            NormalizedEmail = "PETAR@TEST.COM",
                            NormalizedUserName = "PETARPETROV",
                            PasswordHash = "AQAAAAEAACcQAAAAEENYlNW6Nhf3nOlYQCF30KiWocE9MSq7wVbZi7G3w3CwtrYES+BX/rPBd7PGbFjBPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e3bbd956-e9d1-4a76-a052-6bb68c53efeb",
                            TwoFactorEnabled = false,
                            UserName = "PetarPetrov"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "Sofia, Bulgaria",
                            Age = 28,
                            ConcurrencyStamp = "4212b327-c8c3-4e24-84f9-7e0b9dad595b",
                            CurrentRole = "CUSTOMER",
                            DrivingLicenseNumber = "13302343",
                            Email = "firstcustomer@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "First",
                            IsDeleted = false,
                            LastName = "Customer",
                            LockoutEnabled = false,
                            NormalizedEmail = "FIRSTCUSTOMER@GMAIL.COM",
                            NormalizedUserName = "THEVERYFIRSTCUSTOMER",
                            PasswordHash = "AQAAAAEAACcQAAAAEH0ZbUMFNluOv7DP/R87P4YYQLmCwmlys/OtoXewe5UX44KgiSjLDR2/tekjfsOPHQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "afcb9e68-f639-43ce-a21e-235e9ad3c6ba",
                            TwoFactorEnabled = false,
                            UserName = "TheVeryFirstCustomer"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "Burgas, Bulgaria",
                            Age = 40,
                            ConcurrencyStamp = "0b49f815-81cb-4383-a8d1-9e175a998a49",
                            CurrentRole = "CUSTOMER",
                            DrivingLicenseNumber = "73322193",
                            Email = "ivangeorgiev14@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            IsDeleted = false,
                            LastName = "Georgiev",
                            LockoutEnabled = false,
                            NormalizedEmail = "IVANGEORGIEV14@GMAIL.COM",
                            NormalizedUserName = "IVANG",
                            PasswordHash = "AQAAAAEAACcQAAAAEAyhInERoH0yh8Hr1//BeIFXHBF2/DObbJTHlARs5shN7ig7fReyIEXDF3Kvkbks1Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d32f9a25-016a-4e83-bb65-2a5871acfc4a",
                            TwoFactorEnabled = false,
                            UserName = "IvanG"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "Blagoevgrad, Bulgaria",
                            Age = 22,
                            ConcurrencyStamp = "9534fac0-ae9a-42c1-b363-f6381cf3450d",
                            CurrentRole = "CUSTOMER",
                            DrivingLicenseNumber = "91304433",
                            Email = "californication@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Todor",
                            IsDeleted = false,
                            LastName = "Kolev",
                            LockoutEnabled = false,
                            NormalizedEmail = "CALIFORNICATION@GMAIL.COM",
                            NormalizedUserName = "LOVETOACT",
                            PasswordHash = "AQAAAAEAACcQAAAAEBP88Dzd1Myk3jLLoaisWd2TFRJXG3LDB9sEzrjCoM7ElKiD+X5fhj2bhreFIHadqA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "80a1ad4c-5a19-4b61-913f-9d75347e888b",
                            TwoFactorEnabled = false,
                            UserName = "LoveToAct"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Address = "Blagoevgrad, Bulgaria",
                            Age = 24,
                            ConcurrencyStamp = "0328dcbc-9c05-46be-896c-fc3dccc4c564",
                            CurrentRole = "CUSTOMER",
                            DrivingLicenseNumber = "91304433123",
                            Email = "penkapetrova@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Penka",
                            IsDeleted = false,
                            LastName = "Petrova",
                            LockoutEnabled = false,
                            NormalizedEmail = "PENKAPETROVA@GMAIL.COM",
                            NormalizedUserName = "PENKAPETROVA",
                            PasswordHash = "AQAAAAEAACcQAAAAEHMaKxjGj1G1Eov7D5mU1W8ImZV62rflYKhWu+Ct08hhb9ZS7WVppd/RGBM2WPzjSA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a678a86d-b77a-47f1-b61d-e5b9205f366b",
                            TwoFactorEnabled = false,
                            UserName = "PenkaPetrova"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Address = "Botevgrad, Bulgaria",
                            Age = 31,
                            ConcurrencyStamp = "2308050d-3766-4a70-9032-172ca4fbb0fa",
                            CurrentRole = "CUSTOMER",
                            DrivingLicenseNumber = "4984654156",
                            Email = "ivandimitrov@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            IsDeleted = false,
                            LastName = "Dimitrov",
                            LockoutEnabled = false,
                            NormalizedEmail = "IVANDIMITROV@GMAIL.COM",
                            NormalizedUserName = "IVANDIMITROV",
                            PasswordHash = "AQAAAAEAACcQAAAAEKEDfvxYH7m7rSuISSE2ZIpsZOQNJJVva5gu4VktXxjrQgDFBdD1r9R0R5LpFHhyOA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b03a7231-9846-4d6b-a336-899d29510355",
                            TwoFactorEnabled = false,
                            UserName = "IvanDimitrov"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            Address = "Russe, Bulgaria",
                            Age = 48,
                            ConcurrencyStamp = "0f0560e4-99cd-4fbf-98e7-c15d9072c4a8",
                            CurrentRole = "CUSTOMER",
                            DrivingLicenseNumber = "498124654156",
                            Email = "kuzmov34@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Marian",
                            IsDeleted = false,
                            LastName = "Kuzmov",
                            LockoutEnabled = false,
                            NormalizedEmail = "KUZMOV34@GMAIL.COM",
                            NormalizedUserName = "MARIANKUZMOV",
                            PasswordHash = "AQAAAAEAACcQAAAAEGJBSY+KqyMdP4U33R/YHhuVP/KWSn/H9g6kRdcbjtJh4bKLBJ7ocNSmboM4JiUPyA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6c7b22de-05d9-4491-8235-59eaa8f441af",
                            TwoFactorEnabled = false,
                            UserName = "MarianKusmov"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            Address = "Sofia, Bulgaria",
                            Age = 35,
                            ConcurrencyStamp = "2e4ef8f3-71df-4cf8-89d7-e5832629a2a7",
                            CurrentRole = "CUSTOMER",
                            DrivingLicenseNumber = "49812324654156",
                            Email = "pepilakov34@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Petar",
                            IsDeleted = false,
                            LastName = "Lakov",
                            LockoutEnabled = false,
                            NormalizedEmail = "PEPILAKOV34@GMAIL.COM",
                            NormalizedUserName = "PETARLAKOV",
                            PasswordHash = "AQAAAAEAACcQAAAAENH43eL4xmuZz5LK9rNmla603ZSCbb/JVda0wf7owM1bMjwmBDrAz431sNrOXUU+KQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "239214f9-3de7-4cd5-8264-8aecb208477c",
                            TwoFactorEnabled = false,
                            UserName = "PetarLakov"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            Address = "Dobrich, Bulgaria",
                            Age = 24,
                            ConcurrencyStamp = "f26996aa-8ad1-478c-b38c-78951061bda7",
                            CurrentRole = "CUSTOMER",
                            DrivingLicenseNumber = "4982124654156",
                            Email = "nikola12@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Nikola",
                            IsDeleted = false,
                            LastName = "Urumov",
                            LockoutEnabled = false,
                            NormalizedEmail = "NIKOLA12@GMAIL.COM",
                            NormalizedUserName = "NIKOLAURUMOV",
                            PasswordHash = "AQAAAAEAACcQAAAAEP374S2YpbYDkTu1H/2B/Hyutyz/6zDbDUvOQ2tPN28aiDhWJJlFpWVMSd8sFKdkZg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3255bafb-6b83-41d4-92e4-d7e9775cd520",
                            TwoFactorEnabled = false,
                            UserName = "NikolaUrumov"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            Address = "Pernik, Bulgaria",
                            Age = 49,
                            ConcurrencyStamp = "ef74d0ff-585c-452f-aa41-cb16bbf5abae",
                            CurrentRole = "CUSTOMER",
                            DrivingLicenseNumber = "42134654156",
                            Email = "rumi@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Roman",
                            IsDeleted = false,
                            LastName = "Abramovich",
                            LockoutEnabled = false,
                            NormalizedEmail = "RUMI@GMAIL.COM",
                            NormalizedUserName = "RUMI123",
                            PasswordHash = "AQAAAAEAACcQAAAAEJOMnWIqNzfFgqhgKsnl2oiKmI/k9H/IvfowXCVBBMasv7D0O7l8mCdMF7OxO35vpQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e28729a3-caf3-47e7-9c48-6c0eb0b868ba",
                            TwoFactorEnabled = false,
                            UserName = "Rumi123"
                        });
                });

            modelBuilder.Entity("SmartGarage.Data.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NumberPlate")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasColumnType("nvarchar(17)")
                        .HasMaxLength(17);

                    b.Property<int>("VehicleModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleModelId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Colour = "Blue",
                            IsDeleted = false,
                            NumberPlate = "CA 1994 BC",
                            UserId = 3,
                            VIN = "1HGCM82633A004352",
                            VehicleModelId = 2
                        },
                        new
                        {
                            Id = 2,
                            Colour = "Black",
                            IsDeleted = false,
                            NumberPlate = "CA 2011 OC",
                            UserId = 3,
                            VIN = "1HGCM82633A004352",
                            VehicleModelId = 11
                        },
                        new
                        {
                            Id = 3,
                            Colour = "Red",
                            IsDeleted = false,
                            NumberPlate = "E 3994 AC",
                            UserId = 4,
                            VIN = "1HGCM82633A004352",
                            VehicleModelId = 8
                        },
                        new
                        {
                            Id = 4,
                            Colour = "White",
                            IsDeleted = false,
                            NumberPlate = "A 1839 BA",
                            UserId = 5,
                            VIN = "1HGCM82633A004352",
                            VehicleModelId = 4
                        });
                });

            modelBuilder.Entity("SmartGarage.Data.Models.VehicleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("VehicleModels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ManufacturerId = 1,
                            Name = "Model X",
                            VehicleTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            ManufacturerId = 1,
                            Name = "Model S",
                            VehicleTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            ManufacturerId = 2,
                            Name = "Prius",
                            VehicleTypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            ManufacturerId = 2,
                            Name = "HiAce H300",
                            VehicleTypeId = 3
                        },
                        new
                        {
                            Id = 5,
                            ManufacturerId = 3,
                            Name = "Passat",
                            VehicleTypeId = 1
                        },
                        new
                        {
                            Id = 6,
                            ManufacturerId = 3,
                            Name = "Arteon",
                            VehicleTypeId = 1
                        },
                        new
                        {
                            Id = 7,
                            ManufacturerId = 4,
                            Name = "C-class",
                            VehicleTypeId = 1
                        },
                        new
                        {
                            Id = 8,
                            ManufacturerId = 4,
                            Name = "Western-Star",
                            VehicleTypeId = 4
                        },
                        new
                        {
                            Id = 9,
                            ManufacturerId = 5,
                            Name = "X6",
                            VehicleTypeId = 1
                        },
                        new
                        {
                            Id = 10,
                            ManufacturerId = 5,
                            Name = "E30",
                            VehicleTypeId = 1
                        },
                        new
                        {
                            Id = 11,
                            ManufacturerId = 6,
                            Name = "Hornet",
                            VehicleTypeId = 2
                        },
                        new
                        {
                            Id = 12,
                            ManufacturerId = 6,
                            Name = "Civic",
                            VehicleTypeId = 1
                        });
                });

            modelBuilder.Entity("SmartGarage.Data.Models.VehicleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PriceCoefficient")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("VehicleTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Car",
                            PriceCoefficient = 1.0
                        },
                        new
                        {
                            Id = 2,
                            Name = "Motorcycle",
                            PriceCoefficient = 0.90000000000000002
                        },
                        new
                        {
                            Id = 3,
                            Name = "Bus",
                            PriceCoefficient = 2.0
                        },
                        new
                        {
                            Id = 4,
                            Name = "Truck",
                            PriceCoefficient = 2.5
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("SmartGarage.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("SmartGarage.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("SmartGarage.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("SmartGarage.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartGarage.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("SmartGarage.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartGarage.Data.Models.Order", b =>
                {
                    b.HasOne("SmartGarage.Data.Models.Garage", "Garage")
                        .WithMany("Orders")
                        .HasForeignKey("GarageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartGarage.Data.Models.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartGarage.Data.Models.Vehicle", "Vehicle")
                        .WithMany("Orders")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartGarage.Data.Models.ServiceOrder", b =>
                {
                    b.HasOne("SmartGarage.Data.Models.Order", "Order")
                        .WithMany("ServiceOrder")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartGarage.Data.Models.Service", "Service")
                        .WithMany("ServiceOrder")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartGarage.Data.Models.Vehicle", b =>
                {
                    b.HasOne("SmartGarage.Data.Models.User", "User")
                        .WithMany("Vehicles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartGarage.Data.Models.VehicleModel", "VehicleModel")
                        .WithMany()
                        .HasForeignKey("VehicleModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartGarage.Data.Models.VehicleModel", b =>
                {
                    b.HasOne("SmartGarage.Data.Models.Manufacturer", "Manufacturer")
                        .WithMany("Models")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartGarage.Data.Models.VehicleType", "VehicleType")
                        .WithMany("VehicleModels")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
